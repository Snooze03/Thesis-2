# Generated by Django 5.2.5 on 2025-08-21 13:06

import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], verbose_name='Gender')),
                ('activity_level', models.CharField(choices=[('sedentary', 'Sedentary'), ('lightly_active', 'Lightly Active'), ('moderately_active', 'Moderately Active'), ('very_active', 'Very Active')], verbose_name='Activity Level')),
                ('current_weight', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Current Weight')),
                ('goal_weight', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Goal Weight')),
                ('height_ft', models.IntegerField(verbose_name='Height (ft)')),
                ('height_in', models.IntegerField(verbose_name='Height (in)')),
                ('body_goal', models.CharField(choices=[('lose_weight', 'Lose Weight'), ('gain_weight', 'Gain Weight'), ('maintain_weight', 'Maintain Weight'), ('gain_muscle', 'Gain Muscle'), ('build_strength', 'Build Strength')], verbose_name='Body Goal')),
                ('injuries', models.TextField(blank=True, null=True, validators=[django.core.validators.MaxLengthValidator(300)], verbose_name='Injuries')),
                ('food_allergies', models.TextField(blank=True, null=True, validators=[django.core.validators.MaxLengthValidator(300)], verbose_name='Food Allergies')),
                ('workout_frequency', models.CharField(choices=[('1_2', '1-2 Days'), ('3_4', '3-4 Days'), ('5_6', '5-6 Days')], verbose_name='Workout Frequency')),
                ('workout_location', models.CharField(choices=[('home', 'Home'), ('gym', 'Gym'), ('mixed', 'Mixed')], verbose_name='Workout Location')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]
